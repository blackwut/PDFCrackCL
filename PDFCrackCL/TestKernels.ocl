//#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable

/* Macros for reading/writing chars from int32's (from rar_kernel.cl) */
#define GETCHAR(buf, index) (((uchar*)(buf))[(index)])
#define PUTCHAR(buf, index, val) (buf)[(index)>>2] = ((buf)[(index)>>2] & ~(0xffU << (((index) & 3) << 3))) + ((val) << (((index) & 3) << 3))

#define GET(i) (key[(i)])

/* The basic MD5 functions */
#define F(x, y, z) ((z) ^ ((x) & ((y) ^ (z))))
#define G(x, y, z) ((y) ^ ((z) & ((x) ^ (y))))
#define H(x, y, z) ((x) ^ (y) ^ (z))
#define I(x, y, z) ((y) ^ ((x) | ~(z)))

/* The MD5 transformation for all four rounds. */
#define STEP(f, a, b, c, d, x, t, s) \
(a) += f((b), (c), (d)) + (x) + (t); \
(a)  = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s)))); \
(a) += (b);


__constant const uchar pad[32] = {
    0x28, 0xBF, 0x4E, 0x5E, 0x4E, 0x75, 0x8A, 0x41,
    0x64, 0x00, 0x4E, 0x56, 0xFF, 0xFA, 0x01, 0x08,
    0x2E, 0x2E, 0x00, 0xB6, 0xD0, 0x68, 0x3E, 0x80,
    0x2F, 0x0C, 0xA9, 0xFE, 0x64, 0x53, 0x69, 0x7A
};

__kernel void initWordsWithOffset(__constant uchar * offsetString,
                                  uint offsetLenght,
                                  unsigned long long numberOfWords,
                                  __constant uchar * restrict charset,
                                  uint charsetLength,
                                  __constant uchar * restrict otherPad,
                                  __global uint16 * restrict wordsHalfOne,
                                  __global uint16 * restrict wordsHalfTwo,
                                  __global uint4 * restrict hashes)
{
    unsigned long id = get_global_id(0);
    if (id >= numberOfWords)
        return;
    
    //Declaring word length
    uint wordLength = offsetLenght;
    
    //Declaring word
    uint16 wordInt[2] = {0};
    uchar * word = (uchar *)(wordInt);
    
    //Coping offsetString into word
    for (uint i = 0; i < offsetLenght; ++i) {
        word[i] = offsetString[i];
    }
    
    uint remainder = 0;
    uint quoto = id;
    uint quotoPrev;
    
    do {
        quotoPrev = quoto;
        quoto /= charsetLength;
        remainder = quotoPrev - (quoto * charsetLength);
        word[wordLength++] = charset[remainder];
    } while (quoto-- != 0 && wordLength < 32);
    
    for (uint i = 0; wordLength < 32; ++wordLength, ++i) {
        word[wordLength] = pad[i];
    }
    
    for (uint i = 0; i < 52; ++i) {
        word[32 + i] = otherPad[i];
    }
    
    word[84] = 0x80;
    word[120] = (uchar)(84 << 3);
    word[121] = (uchar)(84 >> 5);
    
    wordsHalfOne[id] = wordInt[0];
    barrier(CLK_GLOBAL_MEM_FENCE);
    wordsHalfTwo[id] = wordInt[1];
    hashes[id] = (uint4)(0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476);
}

__kernel void initWordsWithOffset_Rev2(__constant uchar * offsetString,
                                       uint offsetLenght,
                                       unsigned long long numberOfWords,
                                       __constant uchar * restrict charset,
                                       uint charsetLength,
                                       __global uint16 * restrict words)
{
    unsigned long id = get_global_id(0);
    if (id >= numberOfWords)
        return;
    
    //Declaring word length
    uint wordLength = offsetLenght;
    
    //Declaring word
    uchar word[32];
    uint16 * wordInt = (uint16 *)word;
    
    //Coping offsetString into word
    for (uint i = 0; i < offsetLenght; ++i) {
        word[i] = offsetString[i];
    }
    
    uint remainder = 0;
    uint quoto = id;
    uint quotoPrev;
    
    do {
        quotoPrev = quoto;
        quoto /= charsetLength;
        remainder = quotoPrev - (quoto * charsetLength);
        word[wordLength++] = charset[remainder];
    } while (quoto-- != 0 && wordLength < 32);
    
    for (uint i = 0; wordLength < 32; ++wordLength, ++i) {
        word[wordLength] = pad[i];
    }
    
    words[id] = wordInt[0];
}

__kernel void RC4Local(uint numberOfWords,
					   __global uchar16 * restrict keys,
					   __global uint4 * restrict messages,
					   uchar iteration,
					   __local uchar * restrict state) {

	uint id = get_global_id(0);
	if (id >= numberOfWords)
		return;

	uchar key[16];
	((uchar16 *)key)[0] = keys[id] ^ iteration;

	uchar message[16];
	((uint4 *)message)[0] = messages[id];

	uint localSize = get_local_size(0);
	uint localId = get_local_id(0);

	for (uint i = 0; i < 256; ++i) {
		state[i * localSize + localId] = (uchar)i;
	}

	//KSA: Key-Scheduling Algorithm
	uchar tmp = 0;
	uchar jChar = 0;
	uchar kChar = 0;
	uint jInt = 0;
	uint kInt = 0;

	//1. Usare uint al posto dei uchar
	//2. Usare i uchar4/uint al posto dei uchar
	for (uint i = 0; i < 256; ++i) {
		kInt = i * localSize + localId;

		jChar = jChar + state[kInt] + key[i & 15]; //i & 15 = i % 16
		jInt = jChar * localSize + localId;

		//Swap
		tmp = state[kInt];
		state[kInt] = state[jInt];
		state[jInt] = tmp;
	}

	//PRGA: Pseudo-Random Generation Algorithm
	jChar = 0;
	kChar = 0;
	jInt = 0;
	kInt = 0;

	uchar out[16];
	for (uint i = 0; i < 16; ++i) {
		++jChar;
		jInt = jChar * localSize + localId;
		kChar = kChar + state[jInt];
		kInt = kChar * localSize + localId;

		//Swap
		tmp = state[kInt];
		state[kInt] = state[jInt];
		state[jInt] = tmp;

		//Index of state to avoid outbound array state
		tmp += state[kInt];

		out[i] = message[i] ^ state[tmp * localSize + localId];
	}

	messages[id] = ((uint4 *)out)[0];

#if DEBUG_RC4
	if (id == 1) {

		uint v;
		printf("DEBUG RC4:\n");
		printf("Iteration: %d\n", iteration);

		printf("message[1]: ");
		for (v = 0; v < 16; ++v) {
			printf("%02X", message[v]);
		}
		printf("\n");

		printf("key[1]: ");
		for (v = 0; v < 16; ++v) {
			printf("%02X", key[v]);
		}
		printf("\n");

		printf("out: ");
		for (v = 0; v < 16; ++v) {
			printf("%02X", out[v]);
		}
		printf("\n\n");
	}
#endif
}

//struct stateID {
//	uint localID;
//	uint componentID;
//};
//
//static inline stateID indexToStateID(uint index)
//{
//	return {index / 4, i & 4};
//}
//
//static inline uchar stateIDToIndex(stateID stateIndex)
//{
//	return stateIndex.localID * 4 + stateIndex.componentID;
//}
//
//static inline uchar swapChar(__local uchar4 * restrict state, stateID a, stateID b, uint localSize, uint localID)
//{
//	if (a.stateID == b.stateID && a.componentID == b.componentID) {
//
//		uint id = stateIDToIndex(a) * localSize + localID;
//		uchar4 sChar4 = state[id];
//		uchar * s = &sChar4;
//
//		uchar tmp = s[a.componentID];
//		s[a.componentID] = s[b.componentID];
//		s[b.componentID] = tmp;
//
//		state[id] = sChar4;
//
//		return s[a.componentID] + s[b.componentID];
//
//	} else {
//
//		uint aID = stateIDToIndex(a) * localSize + localID;
//		uint bID = stateIDToIndex(b) * localSize + localID;
//
//		uchar4 sAChar4 = &state[aID];
//		uchar4 SBChar4 = &state[bID];
//
//		uchar * sA = &sAChar4;
//		uchar * sB = &SBChar4;
//
//		uchar tmp = sA[a.componentID];
//		sA[a.componentID] = sB[b.componentID];
//		sB[b.componentID] = tmp;
//
//		state[aID] = sAChar4;
//		state[bID] = SBChar4;
//
//		return sA[a.componentID] + sB[b.componentID];
//	}
//
//	return stateIDToIndex(a) + stateIDToIndex(b);
//}

//__kernel void RC4Local_Rev(uint numberOfWords,
//						   __local uchar4 * restrict state,
//						   __global uchar * restrict keys,
//						   __global uchar * restrict messages,
//						   uchar iteration)
//{
//	unsigned long id = get_global_id(0);
//	if (id >= numberOfWords)
//		return;
//
//	for (uint i = 0; i < 64; ++i) {
//		state[i * localSize + localId] = (uchar4)(0, 1, 2, 3) + (i * 4);
//	}
//
//	uchar key[16];
//	((uchar16 *)key)[0] = keys[id] ^ iteration;
//
//	uchar message[16];
//	((uint4 *)message)[0] = messages[id];
//
//	uint localSize = get_local_size(0);
//	uint localId = get_local_id(0);
//
//	uchar k, j, tmp;
//	uchar key[16];
//	uchar out[16];
//	uchar message[16];
//	uint tmpInt = 0;
//
//	//KSA: Key-Scheduling Algorithm
//	j = 0;
//	for (uint i = 0; i < 256; ++i) {
//		j = j + state[i] + key[i & 15]; //i & 15 = i % 16
//
////		//Swap
////		tmp = state[i];
////		state[i] = state[j];
////		state[j] = tmp;
//		swapChar(state, indexToStateID(i), indexToStateID(j));
//	}
//
//	//PRGA: Pseudo-Random Generation Algorithm
//	j = 0;
//	k = 0;
//	for (uint i = 0; i < 16; ++i) {
//		j = (j + 1);
//		k = (k + state[j]);
//
//		//Swap
////		tmp = state[k];
////		state[k] = state[j];
////		state[j] = tmp;
//		tmp = swapChar(state, indexToStateID(j), indexToStateID(k));
//
//		//Index of state to avoid outbound array state
////		tmp = state[j] + state[k];
//		tmpInt = tmp * localSize + localID;
//		out[i] = message[i] ^ state[tmpInt];
//	}
//
//	hashes[id] = arrayToUInt4Value(out);
//
//#if DEBUG_RC4
//	if (id == 1) {
//		uint v;
//		printf("DEBUG RC4:\n");
//		printf("Iteration: %d\n", iteration);
//
//		printf("message[1]: ");
//		for (v = 0; v < 16; ++v) {
//			printf("%02X", message[v]);
//		}
//		printf("\n");
//
//		printf("key[1]: ");
//		for (v = 0; v < 16; ++v) {
//			printf("%02X", key[v]);
//		}
//		printf("\n");
//
//		printf("out: ");
//		for (v = 0; v < 16; ++v) {
//			printf("%02X", out[v]);
//		}
//		printf("\n\n");
//	}
//#endif
//}


__kernel void RC4(uint numberOfWords,
				  __global uchar * keys,
				  __global uchar * messages,
				  uchar iteration) {

	uint id = get_global_id(0);
	if (id >= numberOfWords)
		return;

	__global uint4 * hashes = (__global uint4 *)messages;

	uchar state[256] = {
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
		0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
		0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
		0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
		0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
		0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
		0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
		0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
	};

	uint i;
	uchar k, j, tmp;
	uchar key[16];
	uchar out[16];
	uchar message[16];

	uint localIndex = id * 16;

	for (i = 0; i < 16; ++i) {
		key[i] = keys[localIndex + i] ^ iteration;
	}

	for (i = 0; i < 16; ++i) {
		message[i] = messages[localIndex + i];
	}

	//KSA: Key-Scheduling Algorithm
	j = 0;
	for (i = 0; i < 256; ++i) {
		j = j + state[i] + key[i & 15]; //i & 15 = i % 16

		//Swap
		tmp = state[i];
		state[i] = state[j];
		state[j] = tmp;
	}

	//PRGA: Pseudo-Random Generation Algorithm
	j = 0;
	k = 0;
	for (i = 0; i < 16; ++i) {
		j = (j + 1);
		k = (k + state[j]);

		//Swap
		tmp = state[k];
		state[k] = state[j];
		state[j] = tmp;

		//Index of state to avoid outbound array state
		tmp = state[j] + state[k];

		out[i] = message[i] ^ state[tmp];
	}

	hashes[id] = arrayToUInt4Value(out);

#if DEBUG_RC4
	if (id == 1) {
		uint v;
		printf("DEBUG RC4:\n");
		printf("Iteration: %d\n", iteration);

		printf("message[1]: ");
		for (v = 0; v < 16; ++v) {
			printf("%02X", message[v]);
		}
		printf("\n");

		printf("key[1]: ");
		for (v = 0; v < 16; ++v) {
			printf("%02X", key[v]);
		}
		printf("\n");

		printf("out: ");
		for (v = 0; v < 16; ++v) {
			printf("%02X", out[v]);
		}
		printf("\n\n");
	}
#endif
}

__kernel void RC4Cpu(uint numberOfWords,
					 __global uchar * restrict keys,
					 __global uchar * restrict messages,
					 uchar iteration) {

	uint id = get_global_id(0);
	if (id >= numberOfWords)
		return;

	__global uint4 * hashes = (__global uint4 *)messages;

	uchar state[256] = {
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
		0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
		0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
		0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
		0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
		0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
		0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
		0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
	};

	uint i;
	uchar k, j, tmp;
	uchar key[16];
	uchar out[16];
	uchar message[16];

	uint localIndex = id * 16;

	for (i = 0; i < 16; ++i) {
		key[i] = keys[localIndex + i] ^ iteration;
	}

	for (i = 0; i < 16; ++i) {
		message[i] = messages[localIndex + i];
	}

	//KSA: Key-Scheduling Algorithm
	j = 0;
	for (i = 0; i < 256; ++i) {
		j = j + state[i] + key[i & 15]; //i & 15 = i % 16

		//Swap
		tmp = state[i];
		state[i] = state[j];
		state[j] = tmp;
	}

	//PRGA: Pseudo-Random Generation Algorithm
	j = 0;
	k = 0;
	for (i = 0; i < 16; ++i) {
		j = (j + 1);
		k = (k + state[j]);

		//Swap
		tmp = state[k];
		state[k] = state[j];
		state[j] = tmp;

		//Index of state to avoid outbound array state
		tmp = state[j] + state[k];

		out[i] = message[i] ^ state[tmp];
	}

	hashes[id] = arrayToUInt4Value(out);

#if DEBUG_RC4
	if (id == 1) {
		uint v;
		printf("DEBUG RC4:\n");
		printf("Iteration: %d\n", iteration);

		printf("message[1]: ");
		for (v = 0; v < 16; ++v) {
			printf("%02X", message[v]);
		}
		printf("\n");

		printf("key[1]: ");
		for (v = 0; v < 16; ++v) {
			printf("%02X", key[v]);
		}
		printf("\n");

		printf("out: ");
		for (v = 0; v < 16; ++v) {
			printf("%02X", out[v]);
		}
		printf("\n\n");
	}
#endif
}